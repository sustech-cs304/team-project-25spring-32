package com.example.pa.data.Daos;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.example.pa.data.DatabaseHelper;

import java.util.Map;

public class AlbumDao {
    /**
     * AI-generated-content
     * tool: Deepseek
     * version: latest
     * usage: I directly copy the code from its response and modify the logic of some method, add some
     * methods we need but it did not generate, and add some logs.
     */
    public static final String TABLE_NAME = "Album";
    public static final String COLUMN_ID = "id";
    public static final String COLUMN_NAME = "name";
    public static final String COLUMN_USER_ID = "user_id";
    public static final String COLUMN_IS_AUTO_GENERATED = "is_auto_generated";
    public static final String COLUMN_IS_COLLABORATIVE = "is_collaborative";
    public static final String COLUMN_VISIBILITY = "visibility";
    public static final String COLUMN_CREATED_TIME = "created_time";
    public static final String COLUMN_COVER = "cover";

    public static final String CREATE_TABLE =
            "CREATE TABLE " + TABLE_NAME + " (" +
                    COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    COLUMN_NAME + " TEXT NOT NULL CHECK(length(" + COLUMN_NAME + ") <= 20), " +
                    COLUMN_USER_ID + " INTEGER NOT NULL, " +
                    COLUMN_IS_AUTO_GENERATED + " INTEGER DEFAULT 0, " +
                    COLUMN_IS_COLLABORATIVE + " INTEGER DEFAULT 0, " +
                    COLUMN_VISIBILITY + " TEXT DEFAULT 'private', " +
                    COLUMN_CREATED_TIME + " TEXT DEFAULT (datetime('now')), " +
                    COLUMN_COVER + " TEXT," +
                    "FOREIGN KEY(" + COLUMN_USER_ID + ") REFERENCES " +
                    UserDao.TABLE_NAME + "(" + UserDao.COLUMN_ID + "))";

    private final SQLiteDatabase db;

    public AlbumDao(Context context) {
        this.db = DatabaseHelper.getInstance(context).getWritableDatabase();
    }

    public long addAlbum(String name, int userId, boolean isAutoGenerated,
                         boolean isCollaborative, String visibility) {
        if (name == null || name.isEmpty() || name.length() > 20) {
            Log.e("AlbumDao", "相册名称不合法");
            return -1;
        }

        ContentValues values = new ContentValues();
        values.put(COLUMN_NAME, name);
        values.put(COLUMN_USER_ID, userId);
        values.put(COLUMN_IS_AUTO_GENERATED, isAutoGenerated ? 1 : 0);
        values.put(COLUMN_IS_COLLABORATIVE, isCollaborative ? 1 : 0);
        values.put(COLUMN_VISIBILITY, visibility);

        try {
            Log.d("AlbumDao", "addAlbum: " + name);
//            return db.insert(TABLE_NAME, null, values);
            long result = db.insert(TABLE_NAME, null, values);
            if (result == -1) {
                Log.e("AlbumDao", "插入失败，但未抛出异常");
                // 可能是表名错误、字段名错误等
            }
            return result;
        } catch (SQLException e) {
            Log.e("AlbumDao", "添加相册失败: " + e.getMessage());
            return -1;
        }
    }

    public boolean updateAlbumVisibility(int albumId, String visibility) {
        ContentValues values = new ContentValues();
        values.put(COLUMN_VISIBILITY, visibility);

        try {
            int affected = db.update(TABLE_NAME, values,
                    COLUMN_ID + " = ?", new String[]{String.valueOf(albumId)});
            return affected > 0;
        } catch (SQLException e) {
            Log.e("AlbumDao", "更新相册可见性失败", e);
            return false;
        }
    }

    public boolean updateAlbumCover(int albumId, String coverUri) {
        ContentValues values = new ContentValues();
        values.put(COLUMN_COVER, coverUri);

        try {
            int affected = db.update(TABLE_NAME, values,
                    COLUMN_ID + " = ?", new String[]{String.valueOf(albumId)});
            return affected > 0;
        } catch (SQLException e) {
            Log.e("AlbumDao", "更新相册封面失败", e);
            return false;
        }
    }

    public Cursor getAlbumsByUser(int userId) {
        return db.query(TABLE_NAME,
                null,
                COLUMN_USER_ID + " = ?",
                new String[]{String.valueOf(userId)},
                null, null, COLUMN_CREATED_TIME + " DESC");
    }

    // 获取或创建相册
    public int getOrCreateAlbum(String albumName, int userId, Map<String, Integer> cache) {
        if (cache.containsKey(albumName)) {
            return cache.get(albumName);
        }

        @SuppressLint("Recycle") Cursor cursor = db.query(TABLE_NAME,
                new String[]{COLUMN_ID}, COLUMN_NAME + " = ? AND " + COLUMN_USER_ID + " = ?",
                new String[]{albumName, String.valueOf(userId)},
                null, null, null);

        if (cursor != null && cursor.moveToFirst()) {
            int albumId = cursor.getInt(0);
            cache.put(albumName, albumId);
            return albumId;
        } else {
            long albumId = addAlbum(albumName, userId, false,
            false, "private");// 默认设置为隐私
            cache.put(albumName, (int) albumId);
            return (int) albumId;
        }
    }

    public boolean deleteAlbum(int albumId) {
        try {
            int affected = db.delete(TABLE_NAME,
                    COLUMN_ID + " = ?",
                    new String[]{String.valueOf(albumId)});
            return affected > 0;
        } catch (SQLException e) {
            Log.e("AlbumDao", "删除相册失败", e);
            return false;
        }
    }

    public void clearTable() {
        db.beginTransaction();
        try {
            db.delete(TABLE_NAME, null, null);
            db.execSQL("DELETE FROM sqlite_sequence WHERE name='" + TABLE_NAME + "'");
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    @SuppressLint("Range")
    public String getAlbumNameById(int albumId) {
        @SuppressLint("Recycle") Cursor result = db.query(TABLE_NAME,
                new String[]{COLUMN_NAME}, COLUMN_ID + " = ? ",
                new String[]{String.valueOf(albumId)},
                null, null, null);
        if (result != null && result.moveToFirst()) {
            return result.getString(result.getColumnIndex(COLUMN_NAME));
        } else {
            Log.w("AlbumPhotoDao", "Album ID not found: " + albumId);
            return null;
        }
    }

    @SuppressLint("Range")
    public int getAlbumIdByName(String albumName) {
        @SuppressLint("Recycle") Cursor result = db.query(TABLE_NAME,
                new String[]{COLUMN_ID}, COLUMN_NAME + " = ? ",
                new String[]{albumName},
                null, null, null);
        if (result != null && result.moveToFirst()) {
            return result.getInt(result.getColumnIndex(COLUMN_ID));
        } else {
            Log.w("AlbumPhotoDao", "Album name not found: " + albumName);
            return -1;
        }
    }

    public static class Album {
        public final int id;
        public final String name;
        public final int userId;
        public final boolean isAutoGenerated;
        public final boolean isCollaborative;
        public final String visibility;
        public final String createdTime;
        public final String cover;

        public Album(int id, String name, int userId, boolean isAutoGenerated,
                     boolean isCollaborative, String visibility, String createdTime) {
            this.id = id;
            this.name = name;
            this.userId = userId;
            this.isAutoGenerated = isAutoGenerated;
            this.isCollaborative = isCollaborative;
            this.visibility = visibility;
            this.createdTime = createdTime;
            this.cover = null;
        }

        public Album(int id, String name, int userId, boolean isAutoGenerated,
                     boolean isCollaborative, String visibility, String createdTime,
                     String cover) {
            this.id = id;
            this.name = name;
            this.userId = userId;
            this.isAutoGenerated = isAutoGenerated;
            this.isCollaborative = isCollaborative;
            this.visibility = visibility;
            this.createdTime = createdTime;
            this.cover = cover;
        }
    }
}