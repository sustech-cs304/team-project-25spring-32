package com.example.pa.ui.album;

import static androidx.core.app.ActivityCompat.startIntentSenderForResult;

import static com.example.pa.data.FileRepository.DELETE_REQUEST_CODE;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.IntentSender;
import android.database.Cursor;
import android.net.Uri;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import java.util.ArrayList;
import java.util.List;

import com.example.pa.MyApplication;
import com.example.pa.data.Daos.AlbumDao;
import com.example.pa.data.Daos.AlbumDao.Album;
import com.example.pa.data.FileRepository;

/**
 * AI-generated-content
 * tool: ChatGPT
 * version: 4o
 * usage: I described my UI design to it, and asked how to program.
 * I use the generated code as template.
 */
public class AlbumViewModel extends ViewModel {

    public static class DeleteEvent {
        public final List<Uri> uris;
        public final String albumName;

        public DeleteEvent(List<Uri> uris, String albumName) {
            this.uris = uris;
            this.albumName = albumName;
        }
    }

    private final MutableLiveData<DeleteEvent> deleteEvent = new MutableLiveData<>();
    private MutableLiveData<List<Album>> albumList = new MutableLiveData<>();
    private MutableLiveData<String> event = new MutableLiveData<>();
    private AlbumDao albumDao;
    private final FileRepository fileRepository;

    public AlbumViewModel() {
        this.albumDao = MyApplication.getInstance().getAlbumDao();
        this.fileRepository = MyApplication.getInstance().getFileRepository();
//        initialAlbums();  //仅用作展示
        loadAlbums();
    }

    public LiveData<DeleteEvent> getDeleteEvent() {
        return deleteEvent;
    }

    // 加载用户相册列表
    public void loadAlbums() {
        List<Album> albums = getAlbumsByUserId(1);
        albumList.setValue(albums);
    }

    @NonNull
    private List<Album> getAlbumsByUserId(int userId) {
        List<Album> albums = new ArrayList<>();
        //TODO:实现user有关逻辑
        Cursor cursor = albumDao.getAlbumsByUser(userId); // 假设用户ID是1，可以改为动态获取
        if (cursor != null) {
            while (cursor.moveToNext()) {
                @SuppressLint("Range") int id = cursor.getInt(cursor.getColumnIndex(AlbumDao.COLUMN_ID));
                @SuppressLint("Range") String name = cursor.getString(cursor.getColumnIndex(AlbumDao.COLUMN_NAME));
                @SuppressLint("Range") boolean isAutoGenerated = cursor.getInt(cursor.getColumnIndex(AlbumDao.COLUMN_IS_AUTO_GENERATED)) == 1;
                @SuppressLint("Range") boolean isCollaborative = cursor.getInt(cursor.getColumnIndex(AlbumDao.COLUMN_IS_COLLABORATIVE)) == 1;
                @SuppressLint("Range") String visibility = cursor.getString(cursor.getColumnIndex(AlbumDao.COLUMN_VISIBILITY));
                @SuppressLint("Range") String createdTime = cursor.getString(cursor.getColumnIndex(AlbumDao.COLUMN_CREATED_TIME));

                albums.add(new Album(id, name, userId, isAutoGenerated, isCollaborative, visibility, createdTime));
            }
            cursor.close();
        }
        return albums;
    }

    //仅用作展示
    public void initialAlbums() {
        // 初始化数据
        addAlbum("旅行", 1, false, false, "private");
        addAlbum("家人", 1, false, false, "private");
        addAlbum("朋友", 1, false, false, "private");
        addAlbum("宠物", 1, false, false, "private");
    }

    public LiveData<List<Album>> getAlbumList() {
        return albumList;
    }

    /**
     * AI-generated-content
     * tool: DeepSeek
     * version: R1
     * usage: I asked how to create a local folder, and
     * directly copy the code from its response.
     */
    // 添加相册
    public void addAlbum(String name, int userId, boolean isAutoGenerated, boolean isCollaborative, String visibility) {
        List<Album> albums = getAlbumsByUserId(1);
        for (Album album : albums) {
            if (album.name.equals(name)) {
                event.setValue("Album has existed");
                return;
            }
        }

        boolean folderCreated = fileRepository.createAlbum(name);

        if (folderCreated) {
            long result = albumDao.addAlbum(name, userId, isAutoGenerated, isCollaborative, visibility);
            if (result != -1) {
                loadAlbums(); // 重新加载相册列表
                event.setValue("Album added successfully");
            } else {
//                fileRepository.deleteAlbum(name);
                event.setValue("Failed to add album");
            }
        } else {
            event.setValue("Failed to create folder");
        }
    }

    // 删除相册
    public void deleteAlbum(int albumId, String name) {
        boolean result = albumDao.deleteAlbum(albumId);
        if (result) {
            List<Uri> albumUris = fileRepository.getAlbumImages(name);
            Log.d("Delete", "找到图片" + albumUris);
            deleteEvent.postValue(new DeleteEvent(albumUris, name));
            loadAlbums(); // 重新加载相册列表
            event.setValue("Album deleted successfully");
        } else {
            event.setValue("Failed to delete album");
        }
    }
}
