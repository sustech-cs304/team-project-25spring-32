package com.example.pa.ui.album;

import android.net.Uri;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.example.pa.MyApplication;
import com.example.pa.data.FileRepository;
import com.example.pa.util.UriToPathHelper;

import java.util.ArrayList;
import java.util.List;

public class PhotoinAlbumViewModel extends ViewModel {

    // LiveData 用于持有图片列表，UI 层可以观察此数据的变化
//    private final Map<String, MutableLiveData<List<Photo>>> albumImages = new HashMap<>();
    private final FileRepository fileRepository;
    private final MutableLiveData<List<Uri>> photos = new MutableLiveData<>();
    private final MutableLiveData<String> operationType = new MutableLiveData<>("");
    private final MutableLiveData<AlbumViewModel.DeleteEvent> deleteEvent = new MutableLiveData<>();
    private boolean isAutoGenerated;

    public PhotoinAlbumViewModel() {
        // 初始化每个相册的默认图片
        this.fileRepository = MyApplication.getInstance().getFileRepository();
    }

    // 暴露给Fragment的LiveData
    public LiveData<List<Uri>> getImagesByAlbum(String albumName) {
        loadAlbumPhotos(albumName, isAutoGenerated);
        return photos;
    }

    // 核心方法：加载相册内容
    public void loadAlbumPhotos(String albumName, boolean isAutoGenerated) {
        this.isAutoGenerated = isAutoGenerated;
        List<Uri> result;
        if (!isAutoGenerated) {
            result = fileRepository.getAlbumImages(albumName);
        } else {
            List<String> uris = MyApplication.getInstance().getMainRepository().getPhotoUrisByAlbumName(albumName);
            result = UriToPathHelper.stringToUri(uris);
        }

        photos.postValue(result);
    }

    public void deletePhotos(ArrayList<Uri> photos, String albumName) {
        Log.d("Delete", "找到图片" + photos.size());
        deleteEvent.postValue(new AlbumViewModel.DeleteEvent(photos));
        loadAlbumPhotos(albumName, isAutoGenerated); // 重新加载相册列表
    }

    public void copyPhotosToAlbum(ArrayList<Uri> photos, String albumName) {
        boolean result = fileRepository.copyPhotos(photos, albumName);
        if (result) {
            List<String> photoUris = UriToPathHelper.uriToString(photos);
            MyApplication.getInstance().getMainRepository().copyPhotosToAlbum(photoUris, albumName);
        }
        loadAlbumPhotos(albumName, isAutoGenerated);
    }

    public void movePhotosToAlbum(ArrayList<Uri> photos, String albumName) {
        Log.d("Move", "movePhotosToAlbum: " + albumName);
        copyPhotosToAlbum(photos, albumName);

        Log.d("Move", "Copy finished.");
        deletePhotos(photos, albumName);
    }

    public LiveData<AlbumViewModel.DeleteEvent> getDeleteEvent() {
        return deleteEvent;
    }
    public void setOperationType(String type) {
        operationType.setValue(type);
    }

    public LiveData<String> getOperationType() {
        return operationType;
    }

//    public LiveData<List<Photo>> getImagesByAlbum(String albumName) {
//        if (!albumImages.containsKey(albumName)) {
//            albumImages.put(albumName, new MutableLiveData<>(new ArrayList<>()));
//        }
//        return albumImages.get(albumName);
//    }

//    public void addImage(String albumName, String imageUrl) {
//        MutableLiveData<List<Photo>> liveData = albumImages.get(albumName);
//        if (liveData != null) {
//            List<Photo> currentList = new ArrayList<>(liveData.getValue());
//            currentList.add(new Photo(imageUrl));
//            liveData.setValue(currentList);
//        }
//    }

//    public void removeImage(String albumName, Photo imageItem) {
//        MutableLiveData<List<Photo>> liveData = albumImages.get(albumName);
//        if (liveData != null) {
//            List<Photo> currentList = new ArrayList<>(liveData.getValue());
//            currentList.remove(imageItem);
//            liveData.setValue(currentList);
//        }
//    }

}
